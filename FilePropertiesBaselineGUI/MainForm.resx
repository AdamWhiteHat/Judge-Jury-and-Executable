<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <assembly alias="System.Drawing" name="System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
  <data name="$this.Icon" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        AAABAAEAICAAAAEACACoCAAAFgAAACgAAAAgAAAAQAAAAAEACAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAgAAAAAYpQwANMEUABTJOAAUzUAAENVAAFzlCAAg7SwAGOlEAIDtLABg/UAAMQ08ADEBaABFB
        XQAWQloADUdTAAhFYQAURmAAE0lcABJMVwARTloAH0xgABVPXAAaTmcANVFdACdTWwAXU2UAG1RoACFT
        bgAfVG0ADlVwACNaaAAzXGQAGlxrACBacgAmWnIAH11vAB9ebgAnXHMAKF92ACJfeABGYmcAKmB3AClg
        eAA4Y28AI2V1AC1jegAuZXsAL2Z8ADBmfgBTaG8AL2d9AD5pcwAZa3oAJ2p6AChqewApansAMml/ADts
        eAA0a4AAPWx7AFJucgA6bnkANWyBADZvgwAscYEAU3F6ACxyggAycYQAN3CHAF5xewBJcn8AM3GKAEBz
        gQAvdIUAMHWEADp0iABCdIcAPXOMAEN2hQAceI0AZXaAADJ3iwBjeH0APXiMAFp6fgA/eY0APXmOACF/
        jwBHfY4ARX+MAEd+jwA4f5IAdH+EAEN/kgBdgIgAgICAAD+AlwBkgocADoOhAFGClABohIkAR4OWAEeD
        mgBBhJwASYWYAEGFmwBKhZoASYaYAE6JkABCh5oATYmSAEyImgBQi5IASImcAE6LlABNjJYATIyZAEKL
        nwBOjZYATo6aAFCMoABEjKQAUI2gAEONpAByjpQAUY6hAEmOpQBRj6IAUY+jAFKPowBSkKIAZpKZAFKR
        pABQk6AAU5KlAFGUoQBRlKMATZOpAFqUrAB/lpwASpasAFuYogBVl6gAV5eoAEyXqwCFmJwAWZirAFKZ
        qgBVmK0AUJivAFuZqQBPmrAAHpy4AF6cqQBjnqwAXp+vAHyhowBnobAAa6SyAGmnsQBlp7cAWaq7AFmo
        wgCXqa4AZKq8AG2qugBzq7cAWqrCAG6rugB4rLYAYay9AG6sugBvrL4AbKy/AGqwwgBsscAAdbPEAHe0
        wQBwtMQAqbO5AHq2wQB3tMoAaLfMAGi4zwB1usgAe7rHAH26ygCCu8cAfLzGAH67ywBsu9AAgb3JAHa+
        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
        /////v////x////8f////H//
</value>
  </data>
</root>